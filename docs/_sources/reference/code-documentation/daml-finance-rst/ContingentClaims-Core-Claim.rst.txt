.. Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
.. SPDX-License-Identifier: Apache-2.0

.. _module-contingentclaims-core-claim-90861:

Module ContingentClaims.Core.Claim
==================================

Data Types
----------

.. _type-contingentclaims-core-internal-claim-claim-35538:

**data** `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Core data type used to model cashflows of instruments\.
  See quickstart(../QUICKSTART.md) for a detailed explanation\.
  In the reference paper from Peyton\-Jones this is called 'Contract'\.
  We renamed it to avoid ambiguity\.

  * ``t`` and ``x`` respectively correspond to the ``Observation`` input type and the resulting output type\. An observation is a function from ``t`` to ``x``\. A common choice is to use ``Time`` and ``Decimal``, respectively\.
  * ``a`` is the representation of an asset, e\.g\. a ``Text`` ISIN code\.
  * ``o`` is the representation of an observable, e\.g\. a ``Text``\.

  You should build the ``Claim`` using the smart constructors (e\.g\., ``zero``, ``and``) instead of using the data constructors directly (``Zero``, ``And``)\.

  .. _constr-contingentclaims-core-internal-claim-zero-91734:

  `Zero <constr-contingentclaims-core-internal-claim-zero-91734_>`_

    Represents an absence of claims\. Monoid ``And`` identity\.

  .. _constr-contingentclaims-core-internal-claim-one-74385:

  `One <constr-contingentclaims-core-internal-claim-one-74385_>`_ a

    The bearer acquires one unit of ``a``  *immediately*\.

  .. _constr-contingentclaims-core-internal-claim-give-57619:

  `Give <constr-contingentclaims-core-internal-claim-give-57619_>`_ (`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o)

    The obligations of the bearer and issuer are reversed\.

  .. _constr-contingentclaims-core-internal-claim-and-71042:

  `And <constr-contingentclaims-core-internal-claim-and-71042_>`_

    Used to combine multiple rights together\.

    .. list-table::
       :widths: 15 10 30
       :header-rows: 1

       * - Field
         - Type
         - Description
       * - fst
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -
       * - snd
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -
       * - tail
         - \[`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o\]
         -

  .. _constr-contingentclaims-core-internal-claim-or-76817:

  `Or <constr-contingentclaims-core-internal-claim-or-76817_>`_

    Gives the bearer the right to choose between several claims\.

    .. list-table::
       :widths: 15 10 30
       :header-rows: 1

       * - Field
         - Type
         - Description
       * - fst
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -
       * - snd
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -
       * - tail
         - \[`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o\]
         -

  .. _constr-contingentclaims-core-internal-claim-cond-87672:

  `Cond <constr-contingentclaims-core-internal-claim-cond-87672_>`_

    Gives the bearer the right to the first claim if ``predicate`` is true, else the second claim\.

    .. list-table::
       :widths: 15 10 30
       :header-rows: 1

       * - Field
         - Type
         - Description
       * - predicate
         - `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o
         -
       * - success
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -
       * - failure
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -

  .. _constr-contingentclaims-core-internal-claim-scale-17585:

  `Scale <constr-contingentclaims-core-internal-claim-scale-17585_>`_

    Multiplies the ``claim`` by ``k`` (which can be non\-deterministic)\.

    .. list-table::
       :widths: 15 10 30
       :header-rows: 1

       * - Field
         - Type
         - Description
       * - k
         - :ref:`Observation <type-contingentclaims-core-observation-observation-91686>` t x o
         -
       * - claim
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -

  .. _constr-contingentclaims-core-internal-claim-when-91024:

  `When <constr-contingentclaims-core-internal-claim-when-91024_>`_

    Defers the acquisition of ``claim`` until *the first instant* that ``predicate`` is true\.

    .. list-table::
       :widths: 15 10 30
       :header-rows: 1

       * - Field
         - Type
         - Description
       * - predicate
         - `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o
         -
       * - claim
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -

  .. _constr-contingentclaims-core-internal-claim-anytime-28688:

  `Anytime <constr-contingentclaims-core-internal-claim-anytime-28688_>`_

    Like ``When``, but valid any time the predicate is true (not just infinium)\.

    .. list-table::
       :widths: 15 10 30
       :header-rows: 1

       * - Field
         - Type
         - Description
       * - predicate
         - `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o
         -
       * - claim
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -

  .. _constr-contingentclaims-core-internal-claim-until-25523:

  `Until <constr-contingentclaims-core-internal-claim-until-25523_>`_

    Expires said claim on the *first instant* that ``predicate`` is true\.

    .. list-table::
       :widths: 15 10 30
       :header-rows: 1

       * - Field
         - Type
         - Description
       * - predicate
         - `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o
         -
       * - claim
         - `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o
         -

  **instance** Corecursive (`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o) (ClaimF t x a o)

  **instance** Recursive (`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o) (ClaimF t x a o)

  **instance** (`Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ a, `Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ x, `Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ o, `Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ t) \=\> `Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ (`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o)

  **instance** (`Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ t, `Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ x, `Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ a, `Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ o) \=\> `Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ (`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o)

  **instance** `Monoid <https://docs.daml.com/daml/stdlib/Prelude.html#class-da-internal-prelude-monoid-6742>`_ (`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o)

  **instance** `Semigroup <https://docs.daml.com/daml/stdlib/Prelude.html#class-da-internal-prelude-semigroup-78998>`_ (`Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o)

.. _type-contingentclaims-core-internal-claim-inequality-16052:

**data** `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o

  Data type for boolean predicates supported by the library\.
  A boolean predicate is a generic function with signature ``t -> x -> Bool``\. However, a lmited set of predicates is currently supported\.

  .. _constr-contingentclaims-core-internal-claim-timegte-91610:

  `TimeGte <constr-contingentclaims-core-internal-claim-timegte-91610_>`_ t

    ``True`` when ``time ≥ t``, ``False`` otherwise\.

  .. _constr-contingentclaims-core-internal-claim-timelte-19581:

  `TimeLte <constr-contingentclaims-core-internal-claim-timelte-19581_>`_ t

    ``True`` when ``time ≤ t``, ``False`` otherwise\.

  .. _constr-contingentclaims-core-internal-claim-lte-19296:

  `Lte <constr-contingentclaims-core-internal-claim-lte-19296_>`_ (:ref:`Observation <type-contingentclaims-core-observation-observation-91686>` t x o, :ref:`Observation <type-contingentclaims-core-observation-observation-91686>` t x o)

    ``True`` when ``o(t, x) ≤ o'(t, x)``, ``False`` otherwise, for a pair of observations ``o``, ``o'``\.

  **instance** (`Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ t, `Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ x, `Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ o) \=\> `Eq <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-eq-22713>`_ (`Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o)

  **instance** (`Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ t, `Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ x, `Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ o) \=\> `Show <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-show-show-65360>`_ (`Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o)

.. _type-contingentclaims-core-claim-t-59182:

**type** `T <type-contingentclaims-core-claim-t-59182_>`_
  \= `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_

  Type synonym for ``Claim``\.

Functions
---------

.. _function-contingentclaims-core-claim-zero-85177:

`zero <function-contingentclaims-core-claim-zero-85177_>`_
  \: `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``Zero``\.

.. _function-contingentclaims-core-claim-one-13168:

`one <function-contingentclaims-core-claim-one-13168_>`_
  \: a \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``One``\.

.. _function-contingentclaims-core-claim-give-6964:

`give <function-contingentclaims-core-claim-give-6964_>`_
  \: `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``Give``\.

.. _function-contingentclaims-core-claim-and-76019:

`and <function-contingentclaims-core-claim-and-76019_>`_
  \: `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``And``\. Because of the explicit representation of the
  first two arguments of an ``And``, it can be cumbersome to write ``And c c' []``\.
  With this constructor, you can write ``c \\``and\\`` c'`` instead\. Flattens nested
  ``And``s and applies additive monoid identity eagerly\. Note this is an ``O(n)``
  operation\. For a more efficient alternative, consider ``mconcat``\.

.. _function-contingentclaims-core-claim-or-94966:

`or <function-contingentclaims-core-claim-or-94966_>`_
  \: `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``Or``\. Because of the explicit representation of the
  first two arguments of an ``Or``, it can be cumbersome to write ``Or c c' []``\.
  With this constructor, you can write ``c \\``or\\`` c'`` instead\. Flattens nested
  ``Or``s\. Unlike ``and``, this does not apply a monoid identity\. Note this is an
  ``O(n)`` operation\.

.. _function-contingentclaims-core-claim-cond-73191:

`cond <function-contingentclaims-core-claim-cond-73191_>`_
  \: `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``Cond``\.

.. _function-contingentclaims-core-claim-scale-79608:

`scale <function-contingentclaims-core-claim-scale-79608_>`_
  \: :ref:`Observation <type-contingentclaims-core-observation-observation-91686>` t x o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``Scale``\.

.. _function-contingentclaims-core-claim-when-17123:

`when <function-contingentclaims-core-claim-when-17123_>`_
  \: `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``When``\.

.. _function-contingentclaims-core-claim-anytime-6525:

`anytime <function-contingentclaims-core-claim-anytime-6525_>`_
  \: `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``Anytime``\.

.. _function-contingentclaims-core-claim-until-84890:

`until <function-contingentclaims-core-claim-until-84890_>`_
  \: `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x a o

  Smart constructor for ``Until``\.

.. _function-contingentclaims-core-claim-mapparams-60286:

`mapParams <function-contingentclaims-core-claim-mapparams-60286_>`_
  \: (t \-\> i) \-\> (i \-\> t) \-\> (a \-\> a') \-\> (o \-\> o') \-\> (x \-\> x') \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ i x a o \-\> `Claim <type-contingentclaims-core-internal-claim-claim-35538_>`_ t x' a' o'

  Replace parameters in an ``Claim`` with actual values\.

.. _function-contingentclaims-core-claim-at-6466:

`at <function-contingentclaims-core-claim-at-6466_>`_
  \: t \-\> `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o

  Smart constructor for ``TimeGte``\.
  This boolean predicate is ``True`` for time ≥ t, ``False`` otherwise\.

.. _function-contingentclaims-core-claim-upto-71491:

`upTo <function-contingentclaims-core-claim-upto-71491_>`_
  \: t \-\> `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x a

  Observable that is true for time ≤ t\.
  This boolean predicate is ``True`` for time ≤ t, ``False`` otherwise\.

.. _function-contingentclaims-core-claim-lteq-74380:

`(<=) <function-contingentclaims-core-claim-lteq-74380_>`_
  \: :ref:`Observation <type-contingentclaims-core-observation-observation-91686>` t x o \-\> :ref:`Observation <type-contingentclaims-core-observation-observation-91686>` t x o \-\> `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o

  Smart constructor for ``Lte``\.
  ``import Prelude hiding ((<=))`` in order to use this\.

.. _function-contingentclaims-core-claim-compare-73069:

`compare <function-contingentclaims-core-claim-compare-73069_>`_
  \: (`Ord <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-ord-6395>`_ t, `Ord <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-classes-ord-6395>`_ x, `Number <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-num-number-53664>`_ x, `Divisible <https://docs.daml.com/daml/stdlib/Prelude.html#class-ghc-num-divisible-86689>`_ x, `Action <https://docs.daml.com/daml/stdlib/Prelude.html#class-da-internal-prelude-action-68790>`_ m) \=\> (o \-\> t \-\> m x) \-\> `Inequality <type-contingentclaims-core-internal-claim-inequality-16052_>`_ t x o \-\> t \-\> m `Bool <https://docs.daml.com/daml/stdlib/Prelude.html#type-ghc-types-bool-66265>`_

  Reify the ``Inequality`` into an observation function\.
  This function is used to convert an abstract inequalityvation, e\.g\. ``S ≤ 50.0`` to the actual observation function ``t -> m Bool``\.

  The function is only total when the first argument is too (typically it will fail on ``t`` \> today)\.
